import {
  Injectable,
  Logger,
  ServiceUnavailableException,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import OpenAI from 'openai';
import { IAiDiagnosisService } from '../../domain/interfaces/ai-diagnosis.service.interface';

@Injectable()
export class OpenAiDiagnosisService implements IAiDiagnosisService {
  private readonly logger = new Logger(OpenAiDiagnosisService.name);
  private openai: OpenAI;
  private readonly apiKey?: string;

  constructor(private configService: ConfigService) {
    this.apiKey = this.configService.get<string>('OPENAI_API_KEY');
    if (!this.apiKey) {
      this.logger.error(
        'OPENAI_API_KEY is not configured in environment variables.',
      );
      throw new Error('OpenAI API Key is missing.');
    }
    this.openai = new OpenAI({ apiKey: this.apiKey });
  }

  async suggestDiagnosis(medicalHistory: string[]): Promise<string> {
    if (!medicalHistory || medicalHistory.length === 0) {
      this.logger.warn('Medical history is empty, cannot generate diagnosis.');
      return 'Aun no tiene historia medica registrada. No se puede dar un diagnostico.';
    }

    this.logger.log(
      `Requesting diagnosis suggestion from OpenAI for history: ${medicalHistory.join(', ')}`,
    );

    const prompt = `Actúa como un médico asistente con conocimientos clínicos generales. 
    A partir del historial médico proporcionado, analiza los síntomas y genera un diagnóstico sugerido o próximos pasos recomendados. Complemeneta con la información adicional que crear pertienente y sé conciso, profesional y directo.
    Tareas:
    - Detecta patrones comunes en los síntomas.
    - Sugiere un posible diagnóstico o próximos pasos clínicos (por ejemplo: pruebas adicionales, derivación a un especialista, etc.).
    - Si la información no es concluyente, indícalo y sugiere una evaluación más profunda.

    Historial médico del paciente:
    - ${medicalHistory.join('\n- ')}

    Diagnóstico sugerido / Próximos pasos:
    `;

    try {
      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.5,
        max_tokens: 100,
      });

      const suggestion =
        completion.choices[0]?.message?.content?.trim() ||
        'No suggestion generated by AI.';
      this.logger.log(`OpenAI suggestion received: ${suggestion}`);
      return suggestion;
    } catch (error) {
      this.logger.error(
        `Error calling OpenAI API: ${error.message}`,
        error.stack,
      );

      throw new ServiceUnavailableException(
        `AI service failed: ${error.message}`,
      );
    }
  }
}
